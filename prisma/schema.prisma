generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @default(uuid())
  authId                String          @unique @map("auth_id")
  email                 String?         @unique
  createdAt             DateTime        @default(now()) @map("created_at")
  updatedAt             DateTime        @updatedAt @map("updated_at")
  currentSubscriptionId String?         @map("current_subscription_id")
  firstName             String?         @map("first_name")
  modelPreference       String          @default("gemini-flash") @map("model_preference")
  conversations         Conversation[]
  debtSources           DebtSource[]
  expenseSources        ExpenseSource[]
  incomeSources         IncomeSource[]
  savingsSources        SavingsSource[]
  subscriptions         Subscription[]
  currentSubscription   Subscription?   @relation("UserCurrentSubscription", fields: [currentSubscriptionId], references: [id])

  @@map("users")
}

model Subscription {
  id                 String    @id @default(uuid())
  userId             String    @map("user_id")
  tier               String
  status             String
  startDate          DateTime  @default(now()) @map("start_date")
  endDate            DateTime? @map("end_date")
  canceledReason     String?   @map("canceled_reason")
  totalBillingCycles Int       @default(0) @map("total_billing_cycles")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  usersCurrent       User[]    @relation("UserCurrentSubscription")

  @@map("subscriptions")
}

model IncomeSource {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  sourceName String    @map("source_name")
  amount     Decimal
  frequency  Frequency
  notes      String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("income_sources")
}

model DebtSource {
  id           String    @id @default(uuid())
  userId       String    @map("user_id")
  sourceName   String    @map("source_name")
  amount       Decimal
  frequency    Frequency
  interestRate Decimal   @map("interest_rate")
  minPayment   Decimal?  @map("min_payment")
  notes        String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("debt_sources")
}

model ExpenseSource {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  sourceName String    @map("source_name")
  amount     Decimal
  frequency  Frequency
  notes      String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("expense_sources")
}

model SavingsSource {
  id         String    @id @default(uuid())
  userId     String    @map("user_id")
  sourceName String    @map("source_name")
  amount     Decimal
  frequency  Frequency
  notes      String?
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("savings_sources")
}

model Conversation {
  id             String    @id @default(uuid())
  userId         String    @map("user_id")
  chatType       ChatType  @map("chat_type")
  conversationId String    @unique @map("conversation_id")
  status         String    @default("open")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@unique([userId, chatType], map: "conversations_user_id_chat_type_key")
  @@map("conversations")
}

model Message {
  id             String       @id @default(uuid())
  conversationId String       @map("conversation_id")
  role           MessageRole
  content        String
  meta           Json?
  createdAt      DateTime     @default(now()) @map("created_at")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum Frequency {
  MONTHLY
  ANNUAL
  WEEKLY
}

enum ChatType {
  INCOME
  DEBT
  EXPENSES
  SAVINGS
  OPEN_CHAT
}

enum MessageRole {
  user
  assistant
  system
}
